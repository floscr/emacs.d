#+TITLE: Dired Sidebar
#+AUTHOR: Florian Schr√∂dl (floscr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Variables

#+BEGIN_SRC elisp
(defgroup dired-preview-sidebar nil
  "A minimaap sidebar for Emacs."
  :group 'convenience)

(defcustom dired-preview-sidebar-buffer-name "*Dired Preview Sidebar*"
  "Prefix for buffer names of minimap sidebar."
  :type 'string
  :group 'dired-preview-sidebar)

(defcustom dired-preview-sidebar-thumb-directory "/tmp/dired-preview-thumbs"
  "Prefix for buffer names of minimap sidebar."
  :type 'string
  :group 'dired-preview-sidebar)

(defcustom dired-preview-sidebar-window-width 0.8
  "Fraction of width which should be used for sidebar."
  :type 'number
  :group 'minimap)

(setq dired-preview-sidebar-image-extensions '("jpg" "jpeg" "png" "bmp" "gif" "ai" "eps"))

(defcustom dired-preview-sidebar-video-extensions '("mkv" "mp4" "avi" "mpg" "mpeg" "flv" "mov")
  "Prefix for buffer names of minimap sidebar."
  :type 'list
  :group 'dired-preview-sidebar)
#+END_SRC

* Utils
** Convert to human readable format

#+BEGIN_SRC elisp
;; From https://github.com/skangas/mentor/blob/a4e6fb1034a0cf86b9855e1be41109fdc2a02c4c/mentor.el#L1760
(defun dired-preview-sidebar/bytes-to-human (bytes)
  "Convert BYTES to human readable and try to keep it short."
  (if bytes
      (let* ((bytes (if (stringp bytes) (string-to-number bytes) bytes))
             (kb 1024.0)
             (mb (* kb 1024.0))
             (gb (* mb 1024.0)))
        (cond ((< bytes 0) "???") ;; workaround for old xmlrpc-c
              ((= bytes 0.0) (format "%d" bytes))
              ((< bytes 999.0) (format "%d Bytes" bytes))
              ((< bytes (* kb 999.5)) (format "%.0f Kb" (/ bytes kb)))
              ((< bytes (* mb 999.5))
               (let ((fmt (if (< bytes (* 9.95 mb))
                              "%.1 fMb"
                            "%.0f Mb")))
                 (format fmt (/ bytes mb))))
              ((< bytes (* gb 1000))
               (let ((fmt (if (< bytes (* 9.95 gb))
                              "%.1f Gb"
                            "%.0f Gb")))
                 (format fmt (/ bytes gb))))
              (t "1 TB+")))
    ""))
#+END_SRC

** Thumb renderer

#+BEGIN_SRC elisp
(defun dired-preview-sidebar/is-image? (item)
  (-->
   (f-ext item)
   (-contains? dired-preview-sidebar-image-extensions it)))

(defun dired-preview-sidebar/is-video? (item)
  (-->
   (f-ext item)
   (-contains? dired-preview-sidebar-video-extensions it)))

(defun dired-preview-sidebar/sha (item)
  (shell-command-to-string (concat "sha1sum " item " | cut -f -1 -d \" \"")))

(defun dired-preview-sidebar/insert-thumb (item)
  (let* ((sha1-sum (--> (dired-preview-sidebar/sha item)
                        (s-trim it)))
         (dir dired-preview-sidebar-thumb-directory)
         (result (f-join dir (concat sha1-sum ".png"))))
    (unless (f-exists? dir) (f-mkdir dir))
    (unless (f-exists? result)
      (shell-command-to-string (template "convert \"<<item>>\" -resize '350>' \"<<result>>\"")))
    result))

(defun dired-preview-sidebar/insert-video-thumb (item)
  (let* ((dir dired-preview-sidebar-thumb-directory)
         (result (f-join dir (concat (f-no-ext (file-name-nondirectory item)) ".png"))))
    (unless (f-exists? dir) (f-mkdir dir))
    (unless (f-exists? result)
      (shell-command-to-string (template "ffmpeg -ss 120 -i \"<<item>>\" -t 1 -s 384x216 -f image2 \"<<result>>\"")))
    result))
#+END_SRC

** Update Function

#+BEGIN_SRC elisp
(defun dired-preview-sidebar/update (&optional foo)
  (unless (derived-mode-p 'dired-mode)
    (error "Not a Dired buffer"))
  (if-let* ((item (dired-get-filename nil t))
            (buffer (get-buffer dired-preview-sidebar-buffer-name)))
      (with-current-buffer buffer
        (let ((buffer-read-only nil))
          (erase-buffer)
          (when (dired-preview-sidebar/is-image? item)
            (insert-image-file (dired-preview-sidebar/insert-thumb item))
            (goto-char (point-max))
            (newline))
          (when (dired-preview-sidebar/is-video? item)
            (insert-image-file (dired-preview-sidebar/insert-video-thumb item))
            (goto-char (point-max))
            (newline))
          ;; Filename
          (insert (file-name-nondirectory item) ?\n)
          ;; Filesize
          (insert (dired-preview-sidebar/bytes-to-human (f-size item)) ?\n)
          (when (f-dir? item)
            (-->
              (f-entries item)
              (length it)
              (cond ((eq 0 it) "Empty directory")
                    ((eq 1 it) "1 item")
                    (t (template "<<it>> items")))
              (insert it ?\n)))))))
#+END_SRC

* Main

#+BEGIN_SRC elisp
(defun dired-preview-sidebar ()
  "Open preview Sidebar."
  (interactive)
  (let ((buffer (--> dired-preview-sidebar-buffer-name
                     (or (get-buffer it)
                         (generate-new-buffer it))))
        (last-window (selected-window))
        (window (split-window-horizontally (round (* (window-width) dired-preview-sidebar-window-width)))))
    (with-selected-window window
      (set-window-buffer window buffer))
    (with-current-buffer buffer
      (read-only-mode 1))
    (dired-preview-sidebar/update)))
#+END_SRC

* Etc

#+BEGIN_SRC elisp
;; (advice-add 'dired-goto-file :after #'dired-preview-sidebar/update)
;; (advice-add 'dired-next-line :after #'dired-preview-sidebar/update)
#+END_SRC
