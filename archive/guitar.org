#+TITLE: Guitar
#+AUTHOR: Florian SchrÃ¶dl (floscr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Config

I log my guitar learning into an org file that is formated like this.

#+BEGIN_SRC org :tangle no
| Date                   | Progression | Progressions |
| [2019-07-28 Sun 22:26] | A-D         |           12 |
#+END_SRC

This function starts a timer and after 60 seconds,
plays a sound and prompts me to insert my count.

#+BEGIN_SRC elisp
(defvar +guitar-timer-status-paused)
(defvar +guitar-timer-status-ticking)
(setq +guitar-timer-status '+guitar-timer-status-paused
      +guitar-timer-time nil)

(defface +guitar-timer-face
  '((t . (:height 2.5)))
  "The timer face")

(setq +guitar-chords '("A" "D" "E")
      +guitar-beep  "/System/Library/Sounds/Glass.aiff"
      +guitar-timer-duration 80
      +guitar-timer-buffer-name "*Guitar Timer")

(defun +guitar/chord-combinations ()
  (-reduce-from
        (lambda (acc cur)
          (--> +guitar-chords
               (-map (lambda (x)
                       (unless (or (eq cur x) (-contains? acc (concat x "-" cur)))
                         (concat cur "-" x))) it)
               (-snoc acc it)
               -flatten))
        '() +guitar-chords))

(define-minor-mode +guitar-timer-mode
  "A little timer.")
  ;; nil
  ;; "Guitar Timer"
  ;; +guitar-timer-mode-map)


;; (defvar +guitar-timer-mode-map (make-keymap) "Timer Key Map")

;; (map! :map +guitar-timer-mode-map
;;       :mgnvi "q" '+guitar|quit
;;       :mgnvi [escape] '+guitar|quit)

(defun +guitar/read-timer ()
  (start-process-shell-command "Guitar Timer Done" nil (template "afplay <<+guitar-beep>>"))
  (let ((amount (read-string "Count: ")))
    (other-window 1)
    (insert amount)
    (org-cycle)
    (forward-line -1)
    (evil-normal-state)))

  ;; (let ((amount (read-string "Count: "))
  ;;       (timestamp (format-time-string "[%F %a %H:%M]" (current-time)))
  ;;       (progression (template "<<from>>-<<to>>")))
  ;;   (save-excursion
  ;;     (evil-insert-newline-above)
  ;;     (insert (concat "| " (s-join " | " (list timestamp progression amount))))
  ;;     (call-interactively #'org-cycle))
  ;;   (play-sound-file +guitar-beep)))

(defun +guitar|start-timer (&optional from to)
  "Start a timer for a chord progression."
  (interactive)
  (let ((from (or from (ivy-read "From: " +guitar-chords)))
        (to (or to (ivy-read "To: " +guitar-chords))))
    (insert from)
    (org-cycle)
    (insert to)
    (org-cycle)
    (+guitar/create-timer-buffer #'+guitar/read-timer)))

(defun +guitar|resume-timer ()
  (interactive)
  (if-let ((buffer (get-buffer +guitar-timer-buffer-name)))
      (progn
        (setq +guitar-timer-status '+guitar-timer-status-ticking)
        (+guitar/tick-timer-buffer buffer +guitar-timer-time))
    (message "No guitar timer buffer!")))

(defun +guitar|pause-timer ()
  (interactive)
  (setq +guitar-timer-status '+guitar-timer-status-paused))

(defun +guitar|quit ()
  (interactive)
  (setq +guitar-timer-status '+guitar-timer-status-paused)
  (if-let ((buffer (get-buffer +guitar-timer-buffer-name)))
      (kill-buffer buffer)))

(defun +guitar/tick-timer-buffer (buffer time &optional callback)
  (when (and (get-buffer buffer)
             (eq +guitar-timer-status '+guitar-timer-status-ticking))
    (with-current-buffer buffer
      (erase-buffer)
      (let* ((new-time (- time 1))
             (time-string (format-time-string "%M:%S" (seconds-to-time new-time) t)))
        (put-text-property 0 (length time-string) 'face '+guitar-timer-face time-string)
        (insert time-string)
        (if (> new-time 0)
            (progn
              (setq +guitar-timer-time new-time)
              (run-with-timer 1 nil #'+guitar/tick-timer-buffer buffer new-time callback))
          (if callback
              (funcall callback)))))))

(defun +guitar/create-timer-buffer (&optional callback)
  (let ((buffer (generate-new-buffer +guitar-timer-buffer-name)))
    (pop-to-buffer buffer)
    (with-current-buffer buffer
      (setq +guitar-timer-status '+guitar-timer-status-ticking)
      (let ((inhibit-read-only t))
        (+guitar-timer-mode)
        (erase-buffer)
        (insert (number-to-string +guitar-timer-duration))
        (+guitar/tick-timer-buffer buffer (+ +guitar-timer-duration 1) callback)))))

(defun +guitar|start ()
  (interactive)
  (+guitar/create-timer-buffer '(lambda () (start-process-shell-command "Guitar Timer Done" nil (template "afplay <<+guitar-beep>>")))))

(set-popup-rule! "^\\*Guitar" :quit nil :height 4 :select nil :transient t)

;; (defun promise-sequence (xs)
;;   (if-let ((current (car xs)))
;;     (funcall current (lambda () (promise-sequence (cdr xs))))))

;; (defun +guitar/foo ()
;;   "Hello"
;;   (unless (get-buffer +guitar-timer-buffer-name)
;;     (+guitar/create-timer-buffer '(lambda () (start-process-shell-command "Guitar Timer Done" nil (template "afplay <<+guitar-beep>>")))))
;;   ())

(defun +guitar|start-progressions (&optional from to)
  "Start progression timers"
  (interactive)
  (let ((buffer-name (concat org-ql-view-buffer-name-prefix " (heading Timer)*")))
    (org-ql-search (f-join org-directory "Main/music.org") '(heading "Timer"))
    (with-current-buffer buffer-name
      (org-agenda-switch-to t))
    (kill-buffer buffer-name)
    (with-current-buffer "music.org"
      (search-forward-regexp "Date")
      (forward-line 2)
      (call-interactively #'evil-org-open-above)
      (let ((date (format-time-string "[%Y-%m-%d %a %H:%M]" (current-time))))
        (insert date)
        (org-cycle)
        (+guitar|start-timer from to)))))
#+END_SRC
