#+TITLE: Emacs Work Config
#+AUTHOR: Florian SchrÃ¶dl (floscr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments yes
#+STARTUP: org-startup-folded: content
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Configuration
** Required Packages

#+BEGIN_SRC elisp
(require 'dash)
(require 's)
(require 'f)
(require 'ht)
#+END_SRC

** Config
*** Variables

#+BEGIN_SRC elisp
(setq +MM:base-dir (f-expand "~/Code/Meisterlabs"))
(defun +MM/base-dir-join (x) (f-join +MM:base-dir x))
(setq +MM:mm-dir (+MM/base-dir-join "mindmeister"))
(setq +MM:mm-web-dir (+MM/base-dir-join "mindmeister-web"))
(setq +MM:docker-dir (+MM/base-dir-join "docker-dev-environment"))
#+END_SRC

** Utils
*** Alternate File

#+BEGIN_SRC elisp
(setq +MM-alternate-file-rules '(("component.js" "controller.js")))

(defun +MM|alternate-file ()
  "Find the alternate file for the current buffer."
  (interactive)
  (let* ((file-name (file-name-nondirectory buffer-file-name))
         (file-dir-path (file-name-directory buffer-file-name)))
    (or (-some->>
            (or
             ;; Regular alternate files
             (-some--> +MM-alternate-file-rules
               (--first (-contains? it file-name) it)
               (--first (not (string= file-name it)) it))

             ;; Try finding file with same base name
             (-some--> (s-split "\\." file-name)
               (car it)
               (f-entries file-dir-path (lambda (file)
                                          (let ((entry-file-name (f-filename file)))
                                            (and
                                             (not (string= entry-file-name file-name))
                                             (s-contains? it entry-file-name)))))
               (-map 'f-filename it)
               (if (eq (length it) 1)
                   (car it)
                 (ivy-read "File: " it))))

          (f-join file-dir-path)
          (-id-when 'f-exists?)
          (find-file))
        (projectile-toggle-between-implementation-and-test)
        (user-error "No alternate file found!"))))
#+END_SRC

*** Convert to new Redux style

#+BEGIN_SRC elisp
(defun +MM|convert-to-new-redux-style ()
  "Converts the current buffer to the new redux style."
  (interactive)
  (shell-command (template "jscodeshift --dry --print --silent --transform ~/Code/Meisterlabs/jscodeshift/redux/v5.8.0/actions-controllers.js <<(buffer-file-name)>>") (current-buffer)))
#+END_SRC

*** Create action

Create an action from a controller and import directly

#+BEGIN_SRC elisp
(defun +MM|create-action ()
  "Create an action file from a controller file"
  (interactive)
  (let* ((action-name (f-no-ext (read-string "Action Name: ")))
         (root-dir (file-name-directory (buffer-file-name)))
         (actions-dir (concat root-dir "actions/"))
         (actions-index-file (concat actions-dir "index.js"))
         (action-file (concat actions-dir (concat action-name ".js"))))
    (unless (file-directory-p actions-dir) (mkdir actions-dir))
    (copy-file
     (concat (projectile-project-root) "snippets/Core/Action.js")
     action-file)
    (with-temp-file actions-index-file
      (+js|generate-index actions-dir)
      (progn
        (goto-char (point-max))
        (newline 1)))

    (find-file action-file)))
#+END_SRC

*** Create canvas action

Create a canvas action

#+BEGIN_SRC elisp
(defun +MM|canvas-create-action ()
  "Create an action file from a controller file"
  (interactive)
  (let* ((action-name (read-string "Action Name: "))
         (actions-dir (f-join (projectile-project-root) "src/containers/MapEditor/actions"))
         (actions-index-file (f-join actions-dir "index.js"))
         (action-file (f-join actions-dir (concat action-name ".js"))))
    (copy-file
     (f-join (projectile-project-root) "snippets/Core/Action.js")
     action-file)
    (with-temp-file actions-index-file
      (+js|generate-index actions-dir))
    (find-file action-file)))
#+END_SRC

*** Create container

#+BEGIN_SRC elisp
(defun +MM|create-container ()
  "Create a container from the snippets directory."
  (interactive)
  (let* ((root-path (projectile-project-root))
         (container-snippet-path (f-join root-path "snippets/Core/Container"))
         (containers-path (f-join root-path "src/containers"))
         (container-names (->> (f-directories containers-path)
                               (-map 'file-name-nondirectory)))
         (new-container-name (ivy-read "Container Name: " container-names))
         (new-container-path (f-join containers-path new-container-name)))
    (if (f-exists? new-container-path)
        (progn
          (message "The given directory already exists")
          (+MM|create-container))
      (progn
        (f-copy container-snippet-path new-container-path)
        (find-file (f-join root-path "src/apps/Main/App.js"))
        ;; Copy require stament to be inserted to app to the clipboard
        (--> (f-join root-path "src/")
             (s-chop-prefix it new-container-path)
             (template "'<<new-container-name>>': require('<<it>>/Default/controller'),\n")
             (progn
               (kill-new it)
               (message (template "Created container and copied <<(s-chomp it)>> to the clipboard!"))))))))
#+END_SRC

*** Search MapEditor Only
**** Canvas Files

#+BEGIN_SRC elisp
(defun +MM|canvas-files ()
  "Project files but only for canvas"
  (interactive)
  (ivy-read "Find File: "
            (--filter (s-contains? "MapEditor" it) (projectile-current-project-files))
            :action (lambda (x) (find-file (f-join (projectile-project-root) x)))))
#+END_SRC

*** Insert tap

#+BEGIN_SRC elisp
(defun +MM|chain-tap-log (&optional str)
  "Adds a tap method to a chain."
  (interactive)
  (let ((str (or str "console.log")))
    (save-excursion
      (end-of-line)
      (let ((semi (when (eq ?\; (char-before)) ";")))
        (when semi
          (delete-char -1))
        (newline-and-indent)
        (insert (->> (template ".tap(<<str>>)")
                     (s-append semi))))
      (call-interactively #'evil-indent-line)
      (when current-prefix-arg
        (progn
          (evil-insert-newline-above)
          (next-line)
          (evil-insert-newline-below))))))

(defun +MM|chain-tap-log-state ()
  "Adds a tap method to a chain."
  (interactive)
  (+MM|chain-tap-log "x => console.log('', x.state)")
  (search-forward "'")
  (evil-insert-state))
#+END_SRC

*** Insert debugger

#+BEGIN_SRC elisp
(defun +js|insert-debugger ()
  (interactive)
  (save-excursion
    (if current-prefix-arg
        (progn
          (evil-insert-newline-above))
      (evil-insert-newline-below))
    (insert "debugger;")
    (call-interactively #'evil-indent-line)))
#+END_SRC

*** NodeJs Repl

#+BEGIN_SRC elisp
(defun +MM|nodejs-repl ()
  "Start a repl with the standard library already loaded."
  (interactive)
  (if (not (get-buffer "*nodejs*"))
      (progn
        (nodejs-repl)
        (insert (concat
                 "const __T = require('@meisterlabs/common/node');"
                 "Object.keys(__T).forEach(x => { global[x] = __T[x]; });"))
        (comint-send-input nil t))
    (nodejs-repl)))
#+END_SRC

*** Update Schema Props

#+BEGIN_SRC elisp
(defun +MM|update-schema-props ()
  "Update the schema props with all types in the current schema function body."
  (interactive)
  (save-excursion
    (let* ((point-schema-line
            (progn
              (forward-line)
              (search-backward-regexp "[sS]chema(")
              (backward-char 1)
              (point)))
           (point-schema-body-start
            (progn
              (forward-line)
              (point)))
           (point-schema-body-end (progn
                                    (goto-char point-schema-line)
                                    (search-forward-regexp "{$")
                                    (forward-sexp)
                                    (point)))
           (imports-string
            (--> (buffer-substring-no-properties point-schema-body-start point-schema-body-end)
                 (s-match-strings-all
                  "\\(Array\\|String\\|Object\\|Maybe\\|Any\\|Either\\|Number\\|Boolean\\|Null\\|Store\\|Style\\)" it)
                 -uniq
                 (-map #'-last-item it)
                 (--reject (not (s-capitalized? it)) it)
                 (-sort 'string-lessp it)
                 (s-join ", " it)
                 (template "{ <<it>> }"))))
      (goto-char point-schema-line)
      (goto-char (point-at-bol))
      (while
          (or (re-search-forward "\\(Schema(function(\\)\\(.*\\)\\() {\\)" (point-at-eol) t)
              (re-search-forward "\\(schema(\\)\\(.*\\)\\() {\\)" (point-at-eol) t))
        ;; Fix for error "Match data clobbered by buffer modification hooks [5 times]"
        ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Match-Data.html
        (let ((data (match-data)))
          (unwind-protect
              (set-match-data data)
              (replace-match (template "\\1<<imports-string>>\\3"))))))))
#+END_SRC
*** Make PR

#+BEGIN_SRC elisp
(defun +MM|new-pr-from-branch ()
  (interactive)
  (let* ((branch-name (magit-get-current-branch))
         (branch-name (if (magit-name-remote-branch branch-name)
                          (->> branch-name
                               (magit-name-remote-branch)
                               (magit-split-branch-name)
                               (cdr))
                        (concat  (format-time-string "%y-%m") "-" branch-name)))
         (file (f-join org-directory "Work/.pull-requests" (concat branch-name ".org")))
         ;; Prevent file template being applied for file
         (+file-templates-alist nil))
    (find-file-other-window file)
    (when (eq (buffer-size) 0)
      (yas/insert-by-name "Pull Request Template")
      (goto-char (point-min)))))
#+END_SRC

*** Start kits app

#+BEGIN_SRC elisp
(defun +MM|npm-start-kits-app ()
  (interactive)
  (npm-mode)
  (let* ((dir (f-join (doom-project-root) "src/apps/"))
         (apps (--> dir
                    (f-entries it)
                    (--map (s-replace dir "" it) it))))
    (ivy-read "Start App: " apps
              :action (lambda (x)
                        (npm-mode-npm-run (template "start <<x>> -- --port 3008"))))))
#+END_SRC

*** Dynamic Bookmarks

Since I have multiple git worktrees open at the same time for PRs,
bookmarks are not helpful since they're not relative.

**** Bookmarks

#+BEGIN_SRC elisp
(setq +MM-dynamic-bookmarks
      '(((name . "Canvas Shortcuts: Edit Mode")
         (file . "src/containers/MapEditor/Components/Canvas.defaultProps.js")
         (relative . t)
         (goto . "const editableKeybindings = "))
        ((name . "Canvas Shortcuts: All")
         (file . "src/containers/MapEditor/Components/Canvas.defaultProps.js")
         (relative . t)
         (goto . "const allModesKeybindings = "))
        ((name . "Canvas Default Methods Plugin")
         (file . "src/containers/MapEditor/Plugins/Default/methods.js")
         (relative . t)
         (goto . "export default {"))
        ((name . "Node Editor: Tokenization")
         (file . "src/containers/MapEditor.Node.Editor/Default/actions/componentWillMount.js")
         (relative . t)
         (goto . "const convertTextToTokens"))
        ((name . "Node Editor: Component")
         (file . "src/containers/MapEditor.Node.Editor/Default/component.js")
         (relative . t)
         (goto . "const Component"))
        ((name . "renderEntities")
         (file . "src/containers/MapEditor.Root/Editable/component.js")
         (relative . t)
         (goto . "const renderEntities ="))
        ((name . "DevPlugin")
         (file . "src/apps/Main/DevPlugin.local.js")
         (relative . t))
        ((name . "DevPlugin: slog")
         (file . "src/apps/Main/DevPlugin.local.js")
         (relative . t)
         (goto . "global.slog()"))
        ((name . "DragDrop: findDropPoint")
         (file . "src/containers/MapEditor.DragDrop/actions/helpers.js")
         (relative . t)
         (goto . "export const findDropPoint")
         ("goto-bol" t))
        ((name . "Changes: Action Whitelist")
         (file . "src/API/MapEditor.Changes/index.js")
         (relative . t)
         (goto . "const ACTION_WHITELIST = Arr")
         ("goto-bol" t))
        ((name . "Webpack: CLI flags")
         (file . "src/apps/Main/webpack.config.js")
         (relative . t)
         (goto . "const env = extractEnv")
         ("goto-bol" t))
        ((name . "Options")
         (file . "src/containers/MapEditor/Plugins/Default/options.js")
         (relative . t))
        ((name . "Node style")
         (file . "src/containers/MapEditor/styles/Nodes.js")
         (relative . t))
        ((name . "Redux: Rules")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/knightrider/src/Rules.js")
         (action . #'counsel-imenu)
         (goto . "const methods = {"))
        ((name . "Common: Arr")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/common/src/Types/Arr.js")
         (action . #'counsel-imenu))
        ((name . "Common: Str")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/common/src/Types/Str.js")
         (action . #'counsel-imenu))
        ((name . "Common: Obj")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/common/src/Types/Obj.js")
         (action . #'counsel-imenu))
        ((name . "Common: Maybe")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/common/src/Types/Maybe.js")
         (action . #'counsel-imenu))
        ((name . "Common: Box")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/common/src/Types/Box.js")
         (action . #'counsel-imenu))
        ((name . "Common: Num")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/common/src/Types/Num.js")
         (action . #'counsel-imenu))
        ((name . "Common: CollectionStore")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/redux-core/src/CollectionStore.js")
         (action . #'counsel-imenu))
        ((name . "Docs: Command Line Flags")
         (file . "~/Code/Meisterlabs/kits-2.0/docs/mindmeister/index.mdx")
         (action . #'counsel-imenu))
        ((name . "Geometry: Point")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/redux-geometry/src/Point.js")
         (action . #'counsel-imenu))
        ((name . "Geometry: Area")
         (file . "~/Code/Meisterlabs/kits-2.0/packages/redux-geometry/src/Area.js")
         (action . #'counsel-imenu))))
#+END_SRC

**** Utils

#+BEGIN_SRC elisp
(defun +MM|bookmarks ()
  (interactive)
  (+bookmarks +MM-dynamic-bookmarks))
#+END_SRC

*** Build Package

#+BEGIN_SRC elisp
(defun +MM/normalize-script-name (x)
  (--> x
       (s-replace "build-mindmeister-" "" it)
       (s-replace "staging-" "Staging." (s-titleize it))))

(defun +MM|commit-bundle (&optional branch)
  (interactive)
  (let ((default-directory +MM:mm-dir))
    (magit-call-git "add" "-A")
    (magit-call-git "commit" "-am" (template "Bundle"))
    (unless (s-matches? "bundle-.*" (magit-get-current-branch))
      (magit-branch-spinoff (template "bundle-<<branch>>")))
    (if (magit-get-upstream-branch)
        (progn
          (magit-push-current-to-upstream nil)
          ;; The branch alread exists, so we can safely take the branch name
          (magit-get-upstream-branch))
      (+git|push-dated))))

(defun +MM|build-test-package (&optional no-deploy)
  "Build a package, push bundle to a new backend branch and open deployment url.
When universal-argument is passed, just commit the bundle"
  (interactive "P")
  (require 'deferred)
  (let* ((web-directory (or (projectile-project-root) +MM:mm-web-dir))
         (web-branch-name (magit-get-current-branch))
         (scripts (--> (json-read-file (f-join web-directory "package.json"))
                       (alist-get 'scripts it)
                       (--map (symbol-name (car it)) it)
                       (--filter (s-starts-with? "build-mindmeister-staging-" it) it)
                       (--map (list (+MM/normalize-script-name it) :command it) it)
                       (-append '("Development" :command "build-mindmeister-development") it)))
         (item (ivy-read "Build Package: " scripts))
         (command (--> (--find (string= (car it) item) scripts)
                       (plist-get (cdr it) :command))))
    (deferred:$
      (deferred:process "mm-build-bundle" command item)
      (deferred:nextc it `(lambda () (let ((default-directory +MM:mm-dir)
                                           (deploy-url-directory (--> ,item
                                                                      (s-replace "Staging." "" it)
                                                                      (downcase it)))
                                           (branch (unless ,no-deploy
                                                     (->> ,web-branch-name
                                                          (s-replace "REVIEW-" "")
                                                          (s-match-or-1 "^[0-9][0-9]-[0-9][0-9]-\\(.*\\)$")
                                                          (+MM|commit-bundle)
                                                          (s-replace "origin/" "")))))
                                       (cond
                                        (,no-deploy (message "Deploy finished"))
                                        (+MM:deploy-url
                                         (if +MM:deploy-url
                                             (browse-url (template "<<+MM:deploy-url>>/<<deploy-url-directory>>/deploys/new?reference=<<branch>>"))
                                           (user-error "Please define \"+MM:deploy-url\""))))))))))
#+END_SRC

*** Bump beta package.json

#+BEGIN_SRC elisp
(defun +MM|kits-package-beta-convert ()
  "Find package.json with beta id and bump it to a real version.
To commit call +MM|kits-package-update."
  (interactive)
  (-when-let* ((json-encoding-pretty-print t)
               (file (->> (+git/modfied-files "master")
                          (--filter (string= (f-filename it) "package.json"))
                          (--map (f-join (doom-project-root) it))
                          (--map (list it (json-read-file it)))
                          (--find (->> (nth 1 it)
                                       (alist-get 'version)
                                       (s-contains? "beta")))))
               ((path json-alist) file))
    ;; Can't use a-assoc here because it resorts the list
    (setf
     (alist-get 'version json-alist)
     (s-replace-regexp "-beta.*$" "" (alist-get 'version json-alist)))
    (f-write (concat (json-encode-alist json-alist) "\n") 'utf-8 path)
    (magit-stage-file path)))
#+END_SRC
*** Package Bump Commit

#+BEGIN_SRC elisp
(defun +magit|auto-commit-package-json ()
  "Auto commit package json updates"
  (interactive)
  (-when-let ((package . version)
              (-some->> '("git --no-pager show :package.json" "git --no-pager show HEAD:package.json")
                (-map #'shell-command-to-string)
                (-map
                 (lambda (x)
                   (let* ((json (json-read-from-string x))
                          (deps (alist-get 'dependencies json))
                          (dev-deps (alist-get 'devDependencies json)))
                     (-concat deps dev-deps))))
                (funcall (-applify '-difference))
                (car)))
    (magit-commit-create `("-m" ,(t! "Bump: <<package>>@<<version>>")))))
#+END_SRC

*** Build kits package

#+BEGIN_SRC elisp
(defun +MM|kits-package-update ()
  "Update kits package by bumped version in package.json diff"
  (interactive)

  ;; Check for merge conflicts
  (call-interactively #'magit-fetch-all)
  ;; (when (+git|check-branch-for-merge-conflict)
  ;;   (user-error "This branch has merge conflicts, resolve them before publishing!"))

  (let* ((package-json (car (magit-staged-files)))
         (json (json-read-file package-json))
         (package-path (->> package-json
                            (f-parent)
                            (f-join (projectile-project-root))))
         (v (alist-get 'version json))
         (name (s-replace "@meisterlabs/" "" (alist-get 'name json)))
         (msg (template "<<name>> - <<v>>")))
      (progn
        (magit-call-git "commit" "-m" msg)
        (magit-refresh)
        ;; Kill with install message just for my purposes
        (kill-new (t! "npm i @meisterlabs/<<name>>@<<v>>"))
        (+my/kill-and-message (t! "ð¦ <<msg>>
`npm i @meisterlabs/<<name>>@<<v>>`"))
        (magit-push-current-to-upstream nil)
        (let ((default-directory package-path))
          (shell-command "npm publish")))
    (user-error "Stage the package.json with a version bump.")))
#+END_SRC

*** Split Single Line Chain

#+BEGIN_SRC elisp
(defun +MM|split-single-line-chain ()
  "Split a single line chain to multiple characters."
  (interactive)
  (save-excursion
    (goto-char (point-at-bol))
    (while (search-forward "." (point-at-eol) t nil)
      (backward-char 1)
      (newline-and-indent)
      (forward-char 1))))
#+END_SRC

** Packages
*** New Worktree

#+BEGIN_SRC elisp
(defun +MM/magit-create-worktree (&optional same-branch?)
  "New worktree with the devpanel files and an node modules.
When SAME-BRANCH? is t use the current branch instead of creating a new one."
  (let* ((origin-path (projectile-project-root))
         (path (if same-branch?
                   (-if-let (branch (magit-get-current-branch))
                       (progn (magit-checkout (magit-rev-parse "HEAD"))
                              (magit-worktree-branch-project-worktree branch branch t))
                     (user-error "Error: No branch checked out!"))
                   (call-interactively #'magit-worktree-branch-project-worktree)))
         (local-devutil-file (f-join origin-path "src/apps/Main/DevPlugin.local.js"))
         (worktree-devutil-file (f-join path "src/apps/Main/DevPlugin.local.js")))
    (when (file-exists-p local-devutil-file)
      (copy-file local-devutil-file worktree-devutil-file))
    (async-shell-command-no-window (template "rsync -a <<(f-join origin-path \"node_modules\")>> <<(f-join path \"node_modules\")>>"))))

(defun +MM|magit-create-worktree ()
  "Create a new branch worktree based on an existing branch."
  (interactive)
  (+MM/magit-create-worktree))

(defun +MM|magit-create-existing-worktree ()
  "Create a new worktree based on an existing branch."
  (interactive)
  (+MM/magit-create-worktree t))
#+END_SRC

#+BEGIN_SRC elisp
(after! magit
  (transient-append-suffix 'magit-worktree "b" '("w" "MM: Create Worktree" +MM|magit-create-worktree))
  (transient-append-suffix 'magit-worktree "b" '("W" "MM: Create Worktree Current Branch" +MM|magit-create-existing-worktree)))
#+END_SRC

*** Import File

#+BEGIN_SRC elisp
(defconst +MM-header-start-regex "^/\\*\\* ")
(defconst +MM-header-end-regex " \\*\\*/")
(defconst +MM-comment-headers '("EXTERNALS" "LOCALS" "HELPERS" "MAIN"))
#+END_SRC

**** Imports Table

#+BEGIN_SRC elisp
(require 'ht)
(setq +MM-import:package-exports
      (ht ("@meisterlabs/common"
           '("Try" "Maybe" "Either" "Box" "Switch" "Num" "Obj" "Arr" "Str" "Branch" "Color" "tap"))
          ("@meisterlabs/redux-geometry"
           '("Point" "Area" "Line"))
          ("@meisterlabs/redux"
           '("Redux"))
          ("@meisterlabs/knightrider"
           '("View" "Text" "HoverView" "Icon"))
          ("@meisterlabs/react-hide"
           '("Show" "Hide"))
          ("@meisterlabs/ui"
           '("animations" "animationHelpers" "colors" "rgba" "shadows" "gradients" "planColors" "fonts"
             "Line" "Badge" "Input" "Button" "Toggle" "Select" "Message" "Spinner" "Checkbox" "IconButton" "CommentReply" "DiagonalLine" "IconTextButton" "RadioButton" "PopoverHeader" "UpgradeButton" "TextBlockPlaceholder" "TextBlockPlaceholders" "I18nHtml" "LinkShare"
             "Grid" "GridCore" "GridConfig" "MixedGrid" "GridHelpers"))))
#+END_SRC

**** Main

#+BEGIN_SRC elisp
(defun +MM/relative-file-name (file)
  (--> file
       (file-relative-name it (f-join (doom-project-root) "src"))
       (f-no-ext it)))

(defun +MM:import/has-import? (import)
  "Check if the current line is a multi-line import statement."
  (save-excursion
    (search-backward "{" (point-at-bol) t)))

(defun +MM:import/import-line-is-single-line? ()
  "Check if the current line is a multi-line import statement."
  (save-excursion
    (search-backward "{" (point-at-bol) t)))

(defun +MM:import/import-line-has-export? (export)
  "Check if EXPORT is already declared in the import statement."
  (let ((open-curly (save-excursion (search-backward "{" nil t))))
    (save-excursion (search-backward export open-curly t))))

(defun +MM:import/get-local-imports ()
  "Get possible importable files in the current directory."
  (let ((dir default-directory))
    (-some->> (f-files dir (lambda (x)
                             (not (string= x buffer-file-name)))
                         t)
      (--map (s-replace dir "" it)))))

(defun +MM:import/get-package-imports ()
  "Get possible importable files in the current directory."
  (let ((dir projectile-project-root))
    (--> (concat "jq -r '.dependencies | keys | .[]' " (concat (projectile-project-root) "package.json"))
         shell-command-to-string
         split-string)))

(defun +MM:import/get-common-exports ()
  "Get all possible common package imports."
  (let ((default-directory (f-join (projectile-project-root) "node_modules/@meisterlabs/common/node")))
    (message "%s" default-directory)
    (--> "node -e \"console.log(Object.keys(require('./index.js')).join('\\n'))\""
         shell-command-to-string
         (s-split "\n" it)
         ;; Remove trailing newline
         (-drop-last 1 it))))

(defun +MM:import/buffer-goto-next-header-or-end-of-header ()
  "Go to the "
  ;; Prevent matching the current line
  (goto-char (point-at-eol))
  (if (search-forward-regexp +MM-header-start-regex nil t)
      (progn
        (goto-char (point-at-bol))
        ;; Go to first non-whitespace line
        (or
            (search-backward-regexp "^[^\\/\s\n]" nil t)
            (search-backward-regexp +MM-header-start-regex nil t))
        (goto-char (point-at-eol)))
    (goto-char (point-max))))

(defun +MM:import/make-header-regexp (header)
  (concat +MM-header-start-regex header +MM-header-end-regex))

(defun +MM:import/buffer-goto-or-create-header (header)
  (goto-char (point-max))
  (let* ((remaining-headers (--> (--split-when (string= header it) +MM-comment-headers)
                                 car
                                 (-concat it (list header))
                                 (reverse it)))
         (found-header (--first (search-backward-regexp (+MM:import/make-header-regexp it) nil t) remaining-headers)))

    ;; Main headers are the last ones
    (if (and found-header (not (string= found-header "MAIN")))
        (+MM:import/buffer-goto-next-header-or-end-of-header)
      (goto-char (point-min)))

    (if (string= header found-header)
        (insert "\n")
      (progn
        ;; Unless we're at the beginning of the file or no header was found
        ;; Add missing empty lines
        (when (and found-header (not (eq 1 (line-number-at-pos))))
            (insert "\n\n\n"))
        (insert (concat "/** " header " **/"))
        (insert "\n\n\n")))))

(defun +MM:import|insert-local-import (import &optional no-destruct)
  (let* ((replacement-char "$$0")
         (import-file-or-dir (--> import
                                  (replace-regexp-in-string "/index\.js$" "" it)
                                  (f-no-ext it)))
         (current-dir-prefix (if (f-exists? import)
                                 "./"
                               "")))
    (if no-destruct
        (insert (template "import <<replacement-char>> from '<<current-dir-prefix>><<import-file-or-dir>>';\n"))
      (insert (template "import { <<replacement-char>> } from '<<current-dir-prefix>><<import-file-or-dir>>';\n")))
    (search-backward "$$0")
    (delete-forward-char 3)
    (evil-insert-state)))

(defun +MM:import|insert-package-import (package &optional export no-destruct)
  (message "Is Redux no-destruct: %s" no-destruct)
  (let* ((replacement-char "$$0")
         (line (if no-destruct
                   (template "import <<replacement-char>> from '<<package>>';\n")
                 (template "import { <<replacement-char>> } from '<<package>>';\n"))))
    (if export
        (insert (s-replace "\$\$0" export line))
      (progn
        (if no-destruct
            (insert (template "import <<replacement-char>> from '<<package>>';\n"))
          (insert (template "import { <<replacement-char>> } from '<<package>>';\n")))
        (search-backward replacement-char)
        (delete-forward-char 3)
        (evil-insert-state)))))

(defun +MM-import/update-import (&optional export)
  (goto-char (point-at-eol))
  (cond ((and export (+MM:import/import-line-has-export? export)
          (goto-char (+MM:import/import-line-has-export? export))))

        ((+MM:import/import-line-is-single-line?)
         (progn
             (search-backward-regexp "[A-Za-z] }" (point-at-bol) t)
             (forward-char)
             (insert ", ")
             (if export
                 (insert export)
               (evil-insert-state))))
        (t
         (progn
           (previous-line)
           (goto-char (point-at-eol))
           (insert "\n")
           (indent-according-to-mode)
           (insert ",")
           (backward-char)
           (if export
               (insert export)
             (evil-insert-state))))))

(defun +MM:import/fix-empty-lines ()
  (save-excursion
    (goto-char (point-at-eol))
    (-if-let* ((start (point))
               (end (search-forward-regexp +MM-header-start-regex nil t)))
        (progn
          (goto-char start)
          (goto-char (point-at-eol))
          (-->
           (buffer-substring-no-properties start end)
           (s-split "\n" it)
           (--count (string= "" it) it)
           (- 3 it)
           (max it 0)
           (s-repeat it "\n")
           (insert it))))))

(defun +MM-import/import-package (package &optional export is-local? no-destruct)
  (goto-char (point-min))
  (if (search-forward-regexp (template "from '.*<<package>>.*';") nil t)
      (+MM-import/update-import export)
    (progn
      (+MM:import/buffer-goto-or-create-header (if is-local? "LOCALS" "EXTERNALS"))
      (if is-local?
          (+MM:import|insert-local-import package no-destruct)
        (+MM:import|insert-package-import package export no-destruct))
      (+MM:import/fix-empty-lines))))


(defun +MM-import/find-package-by-symbol (symbol)
  "Find a package by the passed symbol X."
  (ht-find (lambda (key value)
             (--find (equal symbol it) value))
           +MM-import:package-exports))

(defun +MM-import/find-package-export (package)
  (ht-get +MM-import:package-exports package))

(defun +MM-import|import-symbol-at-point ()
  "Import the symbol at point or search for import."
  (interactive)
  (let* ((symbol (format "%s" (symbol-at-point)))
         (package (+MM-import/find-package-by-symbol symbol)))
    (if package
        (save-excursion
          (+MM-import/import-package (car package) symbol nil (string= (car package) "@meisterlabs/redux"))
          (flycheck-buffer))
      (user-error "Package not found"))))

(defun +MM-import|import-other-window-file ()
  "Import from the other file."
  (interactive)
  (let ((file
         (save-window-excursion
           (other-window 1)
           (+MM/relative-file-name (buffer-file-name)))))
    (+MM-import/import-package file nil t)))

(defun +MM:import|ivy-import ()
  (interactive)
  (let ((pos nil))
    (save-excursion
      (let ((local-imports (+MM:import/get-local-imports))
            (package-imports (+MM:import/get-package-imports)))
        (ivy-read "Import: " (-concat local-imports package-imports)
                  :action (lambda (import)
                            (let* ((is-local? (-contains? local-imports import))
                                   (export (unless is-local?
                                             (ivy-read "Export: " (+MM-import/find-package-export import)))))
                              (+MM-import/import-package import export is-local?)
                              (if export
                                  (message (template "Imported: <<export>> from <<import>>"))
                                (setq pos (point))))))))
    (when pos (goto-char pos))))
#+END_SRC

**** Add section line

#+BEGIN_SRC elisp
(defun +MM|last-section-header-expression (header &optional expr)
  "Go to the last expression of a header"
  (interactive)
  (goto-char (point-min))
  (if-let* ((header-line (search-forward-regexp (concat +MM-header-start-regex header)))
            (following-header-line (search-forward-regexp +MM-header-start-regex))
            (lines-between (count-lines header-line following-header-line))
            (has-expression-p (> lines-between 3)))
      (if has-expression-p
          (search-backward-regexp "^[^\\/\s\n]" header-line t))))
#+END_SRC

*** CSS Rules
**** Requirements

#+BEGIN_SRC elisp
(require 'ht)
#+END_SRC

**** Rules

#+BEGIN_SRC elisp
(defvar +MM-Rules-percent)
(defvar +MM-Rules-pixel)
(defvar +MM-Rules-number)
(defvar +MM-Rules-deg)

(defvar +MM-Rules-flex-align
  '("center" "flex-start" "flex-end" "space-between" "space-around" "stretch"))

(defvar +MM-Rules-colors
  '("colors.red"
    "colors.grey900"
    "colors.grey700"
    "colors.grey500"
    "colors.grey300"
    "colors.grey200"
    "colors.grey100"
    "colors.white"
    "colors.blue"
    "colors.sky"
    "colors.navy"
    "colors.turquoise"
    "colors.green"
    "colors.grass"
    "colors.yellow"
    "colors.banana"
    "colors.orange"
    "colors.red"
    "colors.pink"
    "colors.purple"))

(defvar +MM-Rules:fonts nil "All fonts")

(setq +MM-Rules:fonts
      '("fonts.xxxl.bold"
        "fonts.xxxl.medium"
        "fonts.xxxl.regular"
        "fonts.xxl.bold"
        "fonts.xxl.medium"
        "fonts.xxl.regular"
        "fonts.xl.bold"
        "fonts.xl.medium"
        "fonts.l.bold"
        "fonts.l.medium"
        "fonts.l.regular"
        "fonts.m.bold"
        "fonts.m.medium"
        "fonts.m.regular"
        "fonts.s.bold"
        "fonts.s.medium"
        "fonts.s.regular"
        "fonts.xs.bold"
        "fonts.xs.medium"
        "fonts.xs.regular"))


(setq +MM-Web-Rules
      (ht ("flexDirection"            '("column" "row" "row-reverse" "column-reverse"))
          ("alignContent"             +MM-Rules-flex-align)
          ("alignItems"               +MM-Rules-flex-align)
          ("justifyContent"           +MM-Rules-flex-align)
          ("alignSelf"                +MM-Rules-flex-align)
          ("flexGrow"                 '+MM-Rules-number)
          ("flexShrink"               '+MM-Rules-number)
          ("stretch"                  'noop)
          ("flexWrap"                 '+MM-Rules-number)

          ("display"                  '("flex" "block" "inline-flex" "inline-block"))

          ("height"                   '+MM-Rules-number)
          ("maxHeight"                '+MM-Rules-number)
          ("maxSize"                  '+MM-Rules-number)
          ("maxWidth"                 '+MM-Rules-number)
          ("minHeight"                '+MM-Rules-number)
          ("minSize"                  '+MM-Rules-number)
          ("minWidth"                 '+MM-Rules-number)
          ("size"                     '+MM-Rules-number)
          ("width"                    '+MM-Rules-number)

          ("listStyleType"            '+MM-Rules-number)

          ("padding"                  '+MM-Rules-number)
          ("paddingHorizontal"        '+MM-Rules-number)
          ("paddingVertical"          '+MM-Rules-number)
          ("paddingTop"               '+MM-Rules-number)
          ("paddingBottom"            '+MM-Rules-number)
          ("paddingLeft"              '+MM-Rules-number)
          ("paddingRight"             '+MM-Rules-number)

          ("margin"                   '+MM-Rules-number)
          ("marginHorizontal"         '+MM-Rules-number)
          ("marginVertical"           '+MM-Rules-number)
          ("marginTop"                '+MM-Rules-number)
          ("marginBottom"             '+MM-Rules-number)
          ("marginLeft"               '+MM-Rules-number)
          ("marginRight"              '+MM-Rules-number)

          ("position"                 '("absolute" "relative" "fixed"))
          ("absoluteHorizontalCenter" 'noop)
          ("absoluteHorizontalCenter" 'noop)
          ("absoluteCenter"           'noop)
          ("absoluteHorizontalCenter" 'noop)
          ("absoluteVerticalCenter"   'noop)
          ("top"                      '+MM-Rules-number)
          ("left"                     '+MM-Rules-number)
          ("right"                    '+MM-Rules-number)
          ("bottom"                   '+MM-Rules-number)

          ("translateY"               '+MM-Rules-pixel)
          ("translateX"               '+MM-Rules-pixel)
          ("scale"                    '+MM-Rules-number)
          ("scaleX"                   '+MM-Rules-number)
          ("scaleY"                   '+MM-Rules-number)
          ("rotate"                   '+MM-Rules-deg)

          ("color"                    +MM-Rules-colors)
          ("font"                     +MM-Rules:fonts)
          ("fontWeight"               '("heavy" "bold" "black" "light" "normal" "regular"))
          ("fontFamily"               '+MM-Rules-number)
          ("fontSize"                 '+MM-Rules-number)
          ("fontStyle"                '+MM-Rules-number)
          ("lineHeight"               '+MM-Rules-number)
          ("textDecoration"           '+MM-Rules-number)
          ("textShadow"               '+MM-Rules-number)
          ("textTransform"            '+MM-Rules-number)
          ("truncate"                 'noop)
          ("whiteSpace"               '("normal" "nowrap" "pre" "pre-line" "pre-wrap" "initial" "initial"))
          ("wordBreak"                '("normal" "break-all" "keep-all" "break-word" "initial" "inherit"))
          ("wordWrap"                 '("normal" "break-word" "initial" "unsert"))

          ("boxSizing"                '+MM-Rules-number)

          ("cursor"                   '("pointer"))

          ("backfaceVisibility" "hidden")
          ("backgroundColor"          +MM-Rules-colors)
          ("backgroundImage" "")
          ("backgroundPosition"       '("center"))
          ("backgroundRepeat"         '("repeat" "no-repeat" "repeat-x" "repeat-y"))
          ;; ("backgroundSize"        '+MM-Rules-number))

          ("borderBottomLeftRadius"   '+MM-Rules-number)
          ("borderBottomRightRadius"  '+MM-Rules-number)
          ("borderBottomWidth"        '+MM-Rules-number)
          ("borderColor"              +MM-Rules-colors)
          ("borderHorizontalWidth"    '+MM-Rules-number)
          ("borderLeftWidth"          '+MM-Rules-number)
          ("borderRadius"             '+MM-Rules-number)
          ("borderRightWidth"         '+MM-Rules-number)
          ("borderStyle"              '("solid" "dashed"))
          ("borderTopLeftRadius"      '+MM-Rules-number)
          ("borderTopRightRadius"     '+MM-Rules-number)
          ("borderTopWidth"           '+MM-Rules-number)
          ("borderVerticalWidth"      '+MM-Rules-number)
          ("borderWidth"              '+MM-Rules-number)

          ("boxShadow"                '+MM-Rules-number)

          ("overflow"                 '("hidden"))
          ("overflowX"                '("hidden"))
          ("overflowY"                '("hidden"))

          ("fill"                     +MM-Rules-colors)

          ("opacity"                  '+MM-Rules-number)
          ("visibility"               '("visible" "hidden"))

          ("pointerEvents"                 '("none" "auto"))
          ("userSelect"                    '("none" "auto"))

          ("zIndex"                   '+MM-Rules-number)))
#+END_SRC

**** Add rule

#+BEGIN_SRC elisp
(defun +MM|write-rule (rule &optional prop)
  (let* ((maybe-prop-int (condition-case nil
                             (cl-parse-integer prop)
                           (error nil)))
         (prop (cond (maybe-prop-int maybe-prop-int)
                     ;; No argument
                     ((eq prop nil) nil)
                     ;; Color variable
                     ((-contains? +MM-Rules-colors prop) prop)
                     ((-contains? +MM-Rules:fonts prop) prop)
                     ;; String
                     (t (template "'<<prop>>'"))))
         (has-trailing-semi (+my/buffer-line-has ",$")))

    (if has-trailing-semi
        (while
            (re-search-forward ",$" (point-at-eol) t)
          (let ((data (match-data)))
            (unwind-protect
                (set-match-data data)
              (replace-match "")))))

    (evil-insert-newline-below)
    (indent-according-to-mode)
    (insert (template "    .<<rule>>(<<(or prop \"\")>>)"))
    (when has-trailing-semi (insert ","))
    (when (and (eq (type-of prop) 'string)
               (s-matches? "^[A-Za-z0-9\\.]*$" prop))
      (cond ((s-matches? "^colors" prop)
             (save-window-excursion
               (save-excursion (+MM-import/import-package "@meisterlabs/ui" "colors" nil))))
            ((s-matches? "^fonts" prop)
             (save-window-excursion
               (save-excursion (+MM-import/import-package "@meisterlabs/ui" "fonts" nil))))))))

(defun +MM|write-rule-and-restart (rule &optional prop)
  (+MM|write-rule rule prop)
  (+MM|add-rule))

(defun +MM|add-prop-for-rule (rule-string)
  (let* ((rule-value (ht-get +MM-Web-Rules rule-string))
         (further-input (cond
                          ;; Rules without an attribute
                          ;; .absoluteHorizontalCenter()
                          ((eq rule-value #'noop) nil)
                          ;; Rules with numbers
                          ;; .top(10)
                          ((-contains? (list '+MM-Rules-number '+MM-Rules-pixel '+MM-Rules-percent '+MM-Rules-deg) rule-value)
                           (-map #'number-to-string (number-sequence 0 100 10)))
                          ;; Value given by the rule-string
                          ;; position('absolute')
                          (t rule-value))))
    (if further-input
        (ivy-read "Add prop: " further-input
                  :action (lambda (x)
                            (--> x
                                 (cond ((eq rule-value '+MM-Rules-pixel) (concat x "px"))
                                       ((eq rule-value '+MM-Rules-percent) (concat x "%"))
                                       (t x))
                                 (+MM|write-rule-and-restart rule-string it))))
      (+MM|write-rule-and-restart rule-string))))

(defun +MM|add-rule ()
  (interactive)
  (ivy-read "Add Rule: " (ht-keys +MM-Web-Rules)
            :action '+MM|add-prop-for-rule))
#+END_SRC
*** Find actions

#+BEGIN_SRC elisp :tangle no
(defun +MM/global-actions ()
  "Return list of global actions in the app."
  (-when-let ((global-actions local-actions)
              (->> (f-join +MM:mm-web-dir "src/apps/Main/App.js")
                   (f-read)
                   (s-split "\n")
                   (--reduce-from (or (-some->>
                                          (cond
                                           ;; Global actions
                                           ((s-contains? "'actions/" it)
                                            (-when-let ((original name path) (s-match "\s*'?\\([^']+\\)'?: require('\\(.*\\)'),$" it))
                                              (list
                                               :original original
                                               :name name
                                               :path path
                                               :global t)))
                                           ((s-contains? "/actions'" it)
                                            (-when-let ((original name path) (s-match "\s*'?\\([^']+\\)'?: require('\\(.*\\)'),$" it))
                                              (list
                                               :original original
                                               :name name
                                               :path path)))
                                           (-snoc acc)))
                                      acc)
                                  '())
                   (--partition-by (plist-get it :global))))
    (->> local-actions
         ;; Find index files for local actions
         (--map
          (->> (plist-get it :path)
               (f-join +MM:mm-web-dir "src")
               (f-entries)
               (--reject (s-contains? "index" it))
               (-map
                (lambda (x)
                  (list
                   :original (plist-get it :original)
                   :name (concat (plist-get it :name) "." (f-base x))
                   :path x)))))
         (-flatten-n 1)
         (-concat global-actions))))

(defun +MM|add-action ()
  "Adds a global action to the controller or action file."
  (interactive)
  (->> (+MM/global-actions)
       (--map (list (plist-get it :name) it))
       (ivy-read "Action: ")))
#+END_SRC

*** Jump to action

#+BEGIN_SRC elisp
(defun +MM|goto-action ()
  "Go to an action from the app key."
  (interactive)
  (-if-let* ((action-str (-some--> (thing-at-point 'line t)
                                   (s-match ".*: '\\(.*\\)'.*" it)
                                   (nth 1 it)))
             (action-parts (s-split "\\." action-str))
             (action-parent-str (--> action-parts
                                     (-drop-last 1 it)
                                     (s-join "." it)))
             (src-dir (f-join (projectile-project-root) "src"))
             (app-file-contents (-some--> src-dir
                                  (f-join it "apps/Main/App.js")
                                  (f-read it))))
      (-->
       (cond
        ;; Canvas Actions
        ((s-equals? "Canvas" (-first-item action-parts))
         (--> (-remove-item "Canvas" action-parts)
              (s-join "/" it)
              (s-append ".js")
              (f-join src-dir "containers/MapEditor/actions" it)))

        ;; Server Actions
        ((s-equals? "Server" (-first-item action-parts))
         (-some--> (-last-item action-parts)
                   (f-join src-dir "containers/Server/Default" it "onSuccess.js")))

        ;; All other Actions
        (t (-some-->
            (if (> (length action-parts) 1)
                (-drop-last 1 action-parts)
              action-parts)
            (s-join "." it)
            (s-match (template "<<it>>.*require('\\(.*\\)')") app-file-contents)
            (nth 1 it)
            (s-replace "/controller" "" it)
            (if (> (length action-parts) 1)
                (f-join src-dir it "actions" (template "<<(-last-item action-parts)>>.js"))
              (f-join src-dir "actions" "MapListing" (template "<<(-last-item action-parts)>>.js"))))))


       (if (f-exists? it)
           (find-file it)
         (message "No such file: %s" it)))

    (message "No action found!")))
#+END_SRC
*** Branches Utils
**** Utils

#+BEGIN_SRC elisp
(defun +MM/collect-matches (regexp &optional match-number buffer)
  "Return a list of matches of REGEXP in BUFFER or the current buffer if not given."
  (let ((matches))
    (save-match-data
      (save-excursion
        (with-current-buffer (or buffer (current-buffer))
          (save-restriction
            (widen)
            (goto-char 1)
            (while (search-forward-regexp regexp nil t 1)
              (push (cons (match-string-no-properties (or match-number 0)) (point)) matches)))))
      matches)))

(defun +MM/js-collect-branches ()
  (+MM/collect-matches "\\.\\(map\\|mapMerge\\|chain\\|tap\\)Branche?s?('?\\(.+\\)'?,.*$"))
#+END_SRC

**** Toggle Branches

#+BEGIN_SRC elisp
(defun +MM|js-toggle-branches ()
  "Toggle visibility of each branch in the file."
  (interactive)
  (save-excursion
    (--each (+MM/js-collect-branches) (progn (goto-char (cdr it))
                                             (js2-mode-toggle-element)))))
#+END_SRC

**** Counsel Branches

#+BEGIN_SRC elisp
(defun +MM/counsel-branch-menu ()
  "Navigate buffer branches."
  (interactive)
  (ivy-read "imenu items: " (+MM/js-collect-branches)
            :require-match t
            :action (lambda (x) (goto-char (cdr x)))))
#+END_SRC
*** Evil Find File

#+BEGIN_SRC elisp
(defun +MM/find-file-resolver (x)
  "Resolve."
  (if (f-dir? x)
      (f-join x "index.js")
    (s-append ".js" x)))

(defun +MM|evil-find-file-at-point-with-line ()
  "Opens the file at point and goes to line-number."
  (interactive)
  (require 'ffap)
  (require 'f)
  (or (ignore-error (lsp-find-definition))
      (-if-let* ((resolver (lambda (x)
                             (if (f-dir? x)
                                 (f-join x "index.js")
                               (s-append ".js"))))
                 (fname (ffap-string-at-point))
                 (root (projectile-project-root))
                 (resolved (->> (f-join root "src" fname)
                                (+MM/find-file-resolver)))
                 (relative (->> (f-join default-directory fname)
                                (+MM/find-file-resolver))))
          (cond ((f-exists? resolved) (find-file resolved))
                ((f-exists? relative) (find-file relative))
                (t (user-error "Can't find file %s." fname)))
        (user-error "No filename under the cursor."))))
#+END_SRC

*** Meistertask Mode

#+BEGIN_SRC elisp
(-some->> "~/Code/Meisterlabs/meistertask-mode/meistertask.el"
  (-id-when 'f-file?)
  (load-library))
#+END_SRC

** Bindings

#+BEGIN_SRC elisp
(defun +MM/setup-keybindings ()
  "Setup Keybindings"
  (map! :map +MM-Web-mode-map
        :nv "gf" #'+MM|evil-find-file-at-point-with-line
        :localleader
        :desc  "Repl"             "R" #'+MM|nodejs-repl
        :desc  "Bookmarks"        "b" #'+MM|bookmarks
        (:prefix ("f" . "file")
         :desc  "Jump to Entity"               "e"  (cmd! (+ivy/counsel-project-file-jump "src/containers/MapEditor/Entities"))
         :desc  "Search Canvas Files"          "f"  #'+MM|canvas-files
         :desc  "Convert into new Redux Style" "X"  #'+MM|turn-style-object-into-function)
        (:prefix ("g" . "Goto")
         :desc  "Branch"                       "b"  #'+MM/counsel-branch-menu))

  (map! :map +MM-Web-mode-map
        :n "[1" #'+MM|alternate-file
        :n "]1" #'+MM|alternate-file
        :localleader
        (:prefix-map ("c" . "Create")
         :desc  "Generate Index"               "I"  (cmd! (+js|generate-index nil '("helpers")))
         :desc  "Import File"                  "i"  #'+MM:import|ivy-import
         :desc  "Import Symbol"                "s"  #'+MM-import|import-symbol-at-point
         :desc  "Import Other Window"          "o"  #'+MM-import|import-other-window-file
         :desc  "Rule"                         "r"  #'+MM|add-rule
         :desc  "Container Action"             "a"  #'+MM|create-action
         :desc  "Canvas Action"                "A"  #'+MM|canvas-create-action
         :desc  "Container"                    "c"  #'+MM|canvas-create-action)
        (:prefix-map ("d" . "Debug")
         :desc  "Tap Log"                      "t"  #'+MM|chain-tap-log
         :desc  "Tap Log State"                "T"  #'+MM|chain-tap-log-state
         :desc  "Debugger"                     "d"  #'+js|insert-debugger)
        (:prefix-map ("r" . "Refactor")
         :desc  "Update props header"           "U"  #'+MM|update-schema-props
         :desc  "Style function into object"   "rs" #'+MM|turn-style-object-into-function
         :desc  "Extract Props"                 "x"  #'+js|extract-props
         :desc  "Convert into new Redux Style"  "X"  #'+MM|turn-style-object-into-function)))


(add-hook!
 'rjsx-mode-local-vars-hook
 :after (defun check+MM-mode ()
          (when +MM-Web-mode (+MM/setup-keybindings))))
#+END_SRC

** Minor Mode

#+BEGIN_SRC elisp
(def-project-mode! +MM-Web-mode
  :add-hooks (+MM/setup-keybindings)
  :on-enter (setq sgml-basic-offset 4))
#+END_SRC

#+BEGIN_SRC elisp
(use-package! yasnippet
  :init
  (add-to-list 'yas-snippet-dirs (f-expand "~/Code/Meisterlabs/Snippets")))
#+END_SRC
