#+TITLE: Org Utils
#+AUTHOR: Florian SchrÃ¶dl (floscr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* General Functions
** org-heading-text

#+begin_src emacs-lisp
(defun +org/org-heading-text ()
  "Return the text of the current heading"
  (->>
   (org-get-heading t t t t)
   (substring-no-properties)))
#+end_src
* Org QL
** Select entry with ivy

#+begin_src emacs-lisp
(defun +org-ql/counsel (files)
  (interactive)
  (require 'org-ql)
  (ivy-read
     "Query: "
     #'(lambda (input)
         (let ((query (org-ql--query-string-to-sexp input)))
           (ignore-errors
               (org-ql-select files query
                 :action (lambda () (propertize (org-get-heading t) 'marker (copy-marker (point))))))))
     :dynamic-collection t
     :action #'+org|search-goto))
#+end_src

* Utils
** Parsing Functions
*** Match at point
:PROPERTIES:
:SOURCE:   [[https://stackoverflow.com/questions/10074016/org-mode-filter-on-tag-in-agenda-view/33444799#33444799][emacs - Org-mode: Filter on tag in agenda view? - Stack Overflow]]
:END:

Weather the entry at point matches either =TAG= or =TODO=.

#+BEGIN_SRC elisp
(defun +org/match-at-point-p (match)
  "Return non-nil if headline at point matches MATCH.
Here MATCH is a match string of the same format used by
`org-tags-view'."
  (funcall (cdr (org-make-tags-matcher match))
           (org-get-todo-state)
           (org-get-tags-at)
           (org-reduced-level (org-current-level))))
#+END_SRC

** Agenda
*** Skip agenda entry without match

Skip entries without =TODO= or =TAG=.

Can be used like this

#+BEGIN_SRC elisp :tangle no
(let ((org-agenda-skip-function '(+org/agenda-skip-without-match "-WORK")))
    (org-agenda "a"))
#+END_SRC

#+BEGIN_SRC elisp
(defun +org/agenda-skip-without-match (match)
  "Skip current headline unless it matches MATCH.

Return nil if headline containing point matches MATCH (which
should be a match string of the same format used by
`org-tags-view').  If headline does not match, return the
position of the next headline in current buffer.

Intended for use with `org-agenda-skip-function', where this will
skip exactly those headlines that do not match."
  (save-excursion
    (unless (org-at-heading-p) (org-back-to-heading))
    (let ((next-headline (save-excursion
                           (or (outline-next-heading) (point-max)))))
      (if (+org/match-at-point-p match) nil next-headline))))
#+END_SRC
*** Dynamic org agenda span for work week

#+BEGIN_SRC elisp
(defun +org/work-start-day ()
  "Get next work week start day"
  (interactive)
  (let ((remaining-week-days (->> (format-time-string "%u" (current-time))
                                  (string-to-number)
                                  (- 5))))
    (if (< remaining-week-days 0)
        (--> (+ remaining-week-days 1)
             (abs it)
             (template "+<<it>>d"))
      ".")))

(defun +org/work-week-agenda-span ()
  "Returns the remaining number of work days in the current week.
Except for friday, then return the number of days until next wednesday."
  (let ((weekday (->> (format-time-string "%u" (current-time))
                      (string-to-number))))
    (cond
     ;; After friday show until wednesday
     ((eq weekday 4) 2)
     ((eq weekday 5) 5)
     ((eq weekday 6) 4)
     ((eq weekday 7) 3)
     (t 3))))
#+END_SRC

** Org Links
*** Link context at point

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/link-context-at-point ()
  "Is the point under a link."
  (assoc :link (org-context)))
#+END_SRC

*** Offer links at point

Offer all links for either file or agenda under the current =point=.

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/agenda-offer-links-at-point (&optional arg)
  (-when-let* ((marker (or (org-get-at-bol 'org-hd-marker)
                           (org-get-at-bol 'org-marker)))
               (buffer (marker-buffer marker))
               (prefix (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
               (link (org-offer-links-in-entry buffer marker arg prefix)))
    link))

;;;###autoload
(defun +org/offer-links-at-point (&optional arg)
  (-when-let* ((marker (point))
               (buffer (current-buffer))
               (prefix (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
               (link (org-offer-links-in-entry buffer marker arg prefix)))
    link))

;;;###autoload
(defun +org|offer-links-at-point (&optional arg)
  (interactive "P")
  (-some->> (if (eq major-mode 'org-agenda-mode)
                (+org/agenda-offer-links-at-point arg)
              (+org/offer-links-at-point arg))
    (car)
    ((lambda (x) (or (+org/link-url-or-original x) x)))))
#+END_SRC

*** Copy link under Cursor

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/match-link (pos)
  "Return cons of link under point and its position.
POS to match:
0: the entire org link,
1: the url,
2: the title."
  (let ((pos (org-in-regexp org-link-bracket-re 1))
        (str (org-link-unescape (match-string-no-properties pos))))
    (cons str pos)))

;;;###autoload
(defun +org/match-org-link-entire ()
  "Match the link under the cursor as (str . pos)"
  (+org/match-link 0))

;;;###autoload
(defun +org/match-org-link-url ()
  "Match the link url under the cursor as (str . pos)"
  (+org/match-link 1))

;;;###autoload
(defun +org/match-org-link-title ()
  "Match the link title under the cursor as (str . pos)"
  (+org/match-link 2))

(defun +org/copy-or-cut-link (match-fn &optional cut?)
  "Copy or cut the current link under the cursor"
  (my/kill-and-message (car (funcall match-fn)))
  (when cut?
    (-when-let ((link . (beg . end)) (+org/match-org-link-entire))
      (delete-region beg end))))

(defun +org|copy-entire-link (&optional cut?)
  (interactive "P")
  (+org/copy-or-cut-link #'+org/match-org-link-entire cut?))

(defun +org|copy-link-url (&optional cut?)
  (interactive "P")
  (+org/copy-or-cut-link #'+org/match-org-link-url cut?))

(defun +org|copy-link-title (&optional cut?)
  (interactive "P")
  (+org/copy-or-cut-link #'+org/match-org-link-title cut?))
#+END_SRC

*** Open link with mpv

#+BEGIN_SRC elisp
;;;###autoload
(defun +org|mpv-link-at-point ()
  (interactive)
  (-some->> (+org|offer-links-at-point)
    (my::shell/mpv-youtube-url)))
#+END_SRC

** Parse Link

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/parse-link (link)
  "Parse org LINK to pair of url and title."
  (s-match org-bracket-link-regexp link))

;;;###autoload
(defun +org/link-title-or-original (str)
  "Either return the title of a link or the original STR."
  (or (nth 2 (+org/parse-link str))
      str))

;;;###autoload
(defun +org/link-url-or-original (str)
  "Either return the title of a link or the original STR."
  (or (nth 1 (+org/parse-link str))
      str))
#+END_SRC

** Expand org file name

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/expand-org-file-name (x)
  "Expand file name X with org-directory."
  (if (eq (type-of x) 'cons)
      (-map #'+org/expand-org-file-name x)
    (expand-file-name x org-directory)))
#+END_SRC

** Find in files

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/find-in-files (file)
  "Find file in org directory."
  (->> (+org/expand-org-file-name file)
       (find-file)))
#+END_SRC

** Set agenda command or replace on reload

When configuring agenda commands I often eval them for testing.
This helper replaces items with the same key, so you don't end up with a bunch of duplicates in ~agenda-custom-commands~.

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/add-to-agenda-custom-commands (x)
  "Add or replace X in the org-agenda-custom-commands list."
  (if-let ((key (car x))
           (index (--find-index (string= key (car it)) org-agenda-custom-commands)))
      (->> (-replace-at index x org-agenda-custom-commands)
           (setq org-agenda-custom-commands))
    (add-to-list 'org-agenda-custom-commands x)))
#+END_SRC

** Open frame command

My command to call the capture with following attributes.
I disable posframe, since it doesn't go beyond the X Window.

#+BEGIN_SRC elisp
(setq org-protocol-protocol-alist
      '(("capture" :protocol "capture" :function +org-capture|my-open-protocol-frame)))

;;;###autoload
(defun +org-capture|my-open-protocol-frame (info)
  "Open capture, adjust display, disable posframe."
  (interactive)
  (let* ((display ":0")
         (height (* (/ (display-pixel-height display) 4) 2))
         (width (* (/ (display-pixel-width display) 4) 2))
         (frame (make-frame `((name . "doom-capture")
                              (transient . t)
                              (height . (text-pixels . ,height))
                              (width . (text-pixels . ,width))))))
    (select-frame frame)
    ;; HACK: workaround for emacs setting the title correctly and xmonad recognizing it as a window rule
    ;; Generally emacs sets the name way to late for any tiling window manager to recognize it
    (set-frame-name "doom-capture1")
    (set-frame-name "doom-capture")
    ;; HACK: Emacs sets frame dimensions in number of charters / lines
    ;; This can be worked around with text-pixels, but that would round the next character cell
    ;; So we force the window to the dimensions the tiling wm would have given it
    (set-frame-size (selected-frame) width height t))
  (org-protocol-capture info)
  (+popup/raise (selected-window))
  (ivy-posframe-mode -1))

;;;###autoload
(defun +org-capture|my-open-frame ()
  "Open capture, adjust display, disable posframe."
  (interactive)
  (let* ((display ":0")
         (height (* (/ (display-pixel-height display) 4) 2))
         (width (* (/ (display-pixel-width display) 4) 2))
         (frame (make-frame `((name . "doom-capture")
                              (transient . t)
                              (height . (text-pixels . ,height))
                              (width . (text-pixels . ,width))))))
    (select-frame frame)
    ;; HACK: workaround for emacs setting the title correctly and xmonad recognizing it as a window rule
    ;; Generally emacs sets the name way to late for any tiling window manager to recognize it
    (set-frame-name "doom-capture1")
    (set-frame-name "doom-capture")
    ;; HACK: Emacs sets frame dimensions in number of charters / lines
    ;; This can be worked around with text-pixels, but that would round the next character cell
    ;; So we force the window to the dimensions the tiling wm would have given it
    (set-frame-size (selected-frame) width height t))
  (+org-capture/open-frame)

  (ivy-posframe-mode -1))

(add-hook! 'org-capture-after-finalize-hook
  (defun +org-capture/cleanup ()
    "Reenable posframe when quitting the capture window"
    (ivy-posframe-mode 1)))
#+END_SRC

** Create timestamp
:PROPERTIES:
:SOURCE:   [[https://github.com/rails-to-cosmos/ledna/blob/f61b1a831173043c6ba445ba0f5601fa815a1f46/ledna.org#timestamps][ledna/ledna.org at f61b1a831173043c6ba445ba0f5601fa815a1f46 Â· rails-to-cosmos/ledna]]
:END:

Create org timestamps by passing a string like you would in the date picker.

#+BEGIN_SRC elisp
(defun +org/active-timestamp (&optional str)
  (let* ((str (or str ""))
         (default-time (org-current-time))
         (decoded-time (decode-time default-time nil))
         (analyzed-time (org-read-date-analyze str default-time decoded-time))
         (encoded-time (apply #'encode-time analyzed-time)))
    (format-time-string (org-time-stamp-format t) encoded-time)))

(defun +org/inactive-timestamp (&optional str)
  (let* ((str (or str ""))
         (default-time (org-current-time))
         (decoded-time (decode-time default-time nil))
         (analyzed-time (org-read-date-analyze str default-time decoded-time))
         (encoded-time (apply #'encode-time analyzed-time)))
    (format-time-string (org-time-stamp-format t t) encoded-time)))
#+END_SRC
** Get properties

#+begin_src elisp
(defun +org--get-property (name &optional bound)
  (save-excursion
    (let ((re (format "^#\\+%s:[ \t]*\\([^\n]+\\)" (upcase name))))
      (goto-char (point-min))
      (when (re-search-forward re bound t)
        (buffer-substring-no-properties (match-beginning 1) (match-end 1))))))

(defun +org/get-global-property (name &optional file bound)
  "Get a document property named NAME (string) from an org FILE (defaults to
current file). Only scans first 2048 bytes of the document."
  (unless bound
    (setq bound 256))
  (if file
      (with-temp-buffer
        (insert-file-contents-literally file nil 0 bound)
        (+org--get-property name))
    (+org--get-property name bound)))

;;;###autoload
(defun +org-get-global-property (name &optional file bound)
  "Get a document property named NAME (string) from an org FILE (defaults to
current file). Only scans first 2048 bytes of the document."
  (unless bound
    (setq bound 256))
  (if file
      (with-temp-buffer
        (insert-file-contents-literally file nil 0 bound)
        (+org--get-property name))
    (+org--get-property name bound)))

;;;###autoload
(defun +org-get-todo-keywords-for (&optional keyword)
  "Returns the list of todo keywords that KEYWORD belongs to."
  (when keyword
    (cl-loop for (type . keyword-spec)
             in (cl-remove-if-not #'listp org-todo-keywords)
             for keywords =
             (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                     (match-string 1 x)
                                   x))
                     keyword-spec)
             if (eq type 'sequence)
             if (member keyword keywords)
             return keywords)))
#+end_src
